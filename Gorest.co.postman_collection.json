{
	"info": {
		"_postman_id": "442f6e33-fc51-477c-9bdd-f820c8b57edd",
		"name": "Gorest.co",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16116825"
	},
	"item": [
		{
			"name": "Add users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var names = [\"Kevin\", \"Jöao\", \"Luis Juan\", \"Luis Ángel\", \" Jaime\", \"Gualberto \", \"\", \" \", null, \"123\"]; ",
							"var genders = [\"Female\", \"Male\", \"\",\"male\", \"female \", \" male\", null, \"123\"];",
							"var statuses = [\"active\", \"inactive\", \"\", null, \"123\"];",
							"",
							"",
							"pm.variables.set(\"name\", names[_.random(names.length -1)]);",
							"pm.variables.set(\"gender\", genders[_.random(genders.length -1)]);",
							"pm.variables.set(\"status\", statuses[_.random(statuses.length -1)]);",
							"",
							"",
							"var register = {",
							"    \"name\": pm.variables.get(\"name\"),",
							"    \"gender\": pm.variables.get(\"gender\"),",
							"    \"status\": pm.variables.get(\"status\")",
							"",
							"}",
							"pm.variables.set(\"new_user\", register)",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Test successful POST request\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\",  () => {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Test that response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.name).to.be.a(\"string\");",
							"  pm.expect(jsonData.email).to.be.a(\"string\");",
							"  pm.expect(jsonData.gender).to.be.an(\"string\");",
							"  pm.expect(jsonData.status).to.be.an(\"string\");",
							"});",
							"",
							"pm.test(\"Test name is not null or empty\", () => {",
							"    pm.expect(jsonData.name).not.eql(undefined);",
							"})",
							"",
							"pm.test(\"Test Email is not null or empty\", () => {",
							"    pm.expect(jsonData.email).not.eql(undefined);",
							"})",
							"   ",
							"pm.test(\"Test Gender is not null or empty\", () => {",
							"    pm.expect(jsonData.gender).not.eql(undefined)",
							"})",
							"",
							"pm.test(\"Test Status is not null or empty\", () => {",
							"    pm.expect(jsonData.status).not.eql(undefined);",
							"})",
							"",
							"pm.test(\"Test user is male or female gender\", () => {",
							"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);",
							"});",
							"",
							"pm.test(\"Test status is Active or Inactive\", () => {",
							"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "c8d96145669d276604331be1db0aa55c820a728065115b1f274ceb4ee94d08cd",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"name\": \"{{name}}\",\n    \"gender\": \"{{gender}}\",\n    \"status\": \"{{status}}\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/public/v2/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "new_user",
			"value": ""
		}
	]
}